---
description: Core coding best practices for all frontend development. Agent-requestable.
globs:
alwaysApply: false
---

rontend Development Standards (Next.js 15, React 19, TypeScript)
Tech Stack
Next.js 15 (App Router), React 19, TypeScript (strict)
ShadCN UI, Tailwind CSS, Zustand, TanStack Query v5, nuqs, React Hook Form + Zod, NextAuth.js v5, Framer Motion, next-intl

###Folder Structure & Naming Conventions
Folder Structure: A scalable, feature-first structure aligned with Next.js 15 App Router conventions.

- All new custom components (such as Navbar) must be placed in 'src/components/'.
- The 'ui' directory is reserved only for shadcn components.

```
src/
  ├── api/
  |   |-- axios.ts              # axios instance
  |   |-- env.ts                # env validation using zod
  ├── app/                      # Next.js 15 App Router
  │   ├── (protected)/
  |   |   |-- (home)/             # page name
  |   |   |    |-- page.tsx     # landing page for home
  |   |   |    |── error.tsx    # home error page
  │   |   |    |── not-found.tsx # home not-found page page
  │   |   |    |── loading.tsx           # home loading page page
  │   │   ├── layout.tsx        # protected layout for protected section
  │   ├── layout.tsx            # Root layout
  │   ├── page.tsx              # Root page (homepage)
  │   |── error.tsx             # Root error page
  │   |── not-found.tsx         # Root not-found page page
  │   |── loading.tsx           # Root loading page page
  │   └── globals.css           # Global styles
  │
  ├── components/               # Globally shared components
  │   ├── ui/                   # Unstyled primitives from ShadCN
  │   └── shared/               # Common, project-wide components
  ├── lib/                      # Project libraries & utilities
  |   |--home/                  # Server action for home page
  │   |    ├── actions.ts            # Server Actions specfic to that page
  │   ├── auth.ts               # NextAuth.js config & utilities
  │   ├── utils.ts              # General helper functions (formatters, etc.)
  |   |-- home/                 # page specific validators
  │   └── validators.ts         # Zod schemas
  │
  ├── hooks/                    # Custom React hooks (e.g., use-media-query.ts)
  ├── providers/                # Global context providers (Theme, QueryClient)
  ├── stores/                   # Zustand client-side stores
  └── middleware.ts             # Next.js middleware for auth, redirects, etc.
```

- **Naming:**
  - Components/Layouts: `PascalCase.tsx`
  - Hooks: `use-kebab-case.ts`
  - Other files/folders: `kebab-case`

## Coding Best Practices

- Use modern JS/TS, React 19+, Next.js 15+ features
- Strict typing; functional components and hooks
- Keep code clear, maintainable, and DRY
- Small, focused, reusable components
- Use state management (Zustand, TanStack Query) appropriately; avoid prop drilling
- Prioritize accessibility (a11y) and performance (lazy loading, memoization, code splitting)
- Use Tailwind CSS & ShadCN UI for styling
- Handle errors gracefully; provide user feedback
- Avoid hardcoding; use config/env variables
- No deprecated APIs; keep dependencies minimal and updated
- Write tests for logic and critical UI
- Document complex logic as needed
- All React components that use client-side hooks (e.g., useState, useEffect, useTheme) must include the 'use client' directive at the top of the file. This is required for Next.js client components.
- Any file that uses client-side hooks (such as useSidebar, useState, useEffect, useTheme, etc.) must include the 'use client' directive at the top. This is required for Next.js client components and layouts.

## Component & Hook Guidelines

- Prefer Server Components for data/static content; use "use client" only for interactivity
- Single responsibility per component/hook
- Separate UI, logic, and data-fetching
- Use props for config, children for composition
- Extract reusable logic into hooks/utilities
- All async UI must have `loading.tsx` and `error.tsx` fallbacks

## State & Context

- Use custom hooks for client logic; prefix with "use"
- Use context only for truly global state; prefer single source of truth (Zustand)
- Clean up side effects in hooks

## Code Quality

- Follow DRY, KISS, and separation of concerns
- Immutability for state
- Named exports; avoid wildcard imports
- Descriptive, consistent naming
- Zero lint warnings/errors; use Prettier & ESLint

## Documentation & Environment

- Document public APIs, complex components, and hooks
- Use .env for config; never commit secrets; validate env vars at startup

## Accessibility & Security

- Use semantic HTML; ensure keyboard/screen reader support
- Audit a11y regularly (axe, Lighthouse)
- Sanitize user input/output; avoid `dangerouslySetInnerHTML`
- Monitor dependencies for vulnerabilities

## Performance & Testing

- Remove deprecated code/APIs/deps regularly
- Use React.memo, useMemo, and useCallback strategically for performance optimization
- Memoize components where appropriate to avoid unnecessary re-renders
- Test all edge cases: empty, invalid, and large inputs
- Use Storybook or similar tools for isolated UI testing

## Responsive & Mobile-First Design (Updated 2025-01-09)

- All UIs must be fully responsive and tested on both mobile and desktop breakpoints
- Use mobile-first design approach with Tailwind's responsive utilities (`lg:`, `md:`, etc.)
- Conditional rendering required for mobile vs desktop layouts when they differ significantly
- Test all components on actual devices, not just browser dev tools
- Avoid fixed widths except for intentional sidebars; use `max-w-*` for content

## TypeScript & Validation Standards (Updated 2025-01-09)

- Use explicit TypeScript types for all function parameters, especially form data and validation schemas
- Avoid relying solely on Zod inference for complex objects (e.g., FileList, nested objects)
- All user-facing forms must use Zod + React Hook Form for validation
- Server actions must have comprehensive error handling and type safety
- Mark all props and function parameters as `readonly` where possible

## SonarQube Compliance (Updated 2025-01-09)

- Use `??` (nullish coalescing) instead of `||` for default values
- Avoid deep nesting in JSX and logic (max 3 levels); prefer flat, readable structures
- Do not use nested ternary operators; use if/else statements or helper functions instead
- Avoid unused variables and parameters (prefix with `_` if needed)
- Extract complex logic into helper functions to improve readability

## Enhanced Error Handling & Accessibility (Updated 2025-01-09)

- All error messages must be user-friendly and never expose internal details
- Provide immediate feedback for user actions (loading states, success/error messages)
- Use semantic HTML, ARIA labels, and ensure keyboard navigation for all interactive elements
- Test accessibility with screen readers and keyboard-only navigation

## Animation & UX (Updated 2025-01-09)

- Use Framer Motion for all UI transitions and animations
- Animations must be fast (2-8ms per character for typing effects), smooth, and not block user input
- Provide visual feedback for all user interactions
- Ensure animations are accessible and can be disabled if needed
