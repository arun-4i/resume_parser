---
description: Comprehensive checklist and best practices for reviewing frontend code (Next.js, React, TypeScript, etc.). Ensures code quality, maintainability, and adherence to project standards. Agent-requestable.
globs:
alwaysApply: false
---

# Frontend Code Review Guidelines

## What to Check For

- Code clarity, readability, and maintainability
- Correctness and adherence to requirements
- Consistent use of TypeScript types
- Proper use of React/Next.js patterns
- State management best practices (Zustand, TanStack Query, etc.)
- UI consistency and accessibility (a11y)
- Security (XSS, CSRF, etc.)
- Performance (avoid unnecessary re-renders, optimize bundle size)
- Test coverage and meaningful test cases
- No linting or formatting errors

## Best Practices

- Leave constructive, actionable feedback
- Ask clarifying questions if requirements are unclear
- Suggest improvements, but respect author's intent
- Approve only when all checklist items and comments are resolved

## Additional Review Criteria (Updated 2025-01-09)

### Responsive Design

- [ ] Component tested on both mobile and desktop breakpoints
- [ ] Uses mobile-first approach with Tailwind responsive utilities
- [ ] Conditional rendering implemented correctly for different screen sizes
- [ ] No fixed widths except for intentional sidebars

### TypeScript & Validation

- [ ] All function parameters have explicit types (especially forms and server actions)
- [ ] Zod + React Hook Form used for all user-facing forms
- [ ] Props and function parameters marked as `readonly` where appropriate
- [ ] No reliance on implicit Zod inference for complex objects

### SonarQube Compliance

- [ ] Uses `??` instead of `||` for default values
- [ ] No deep nesting (max 3 levels) in JSX or logic
- [ ] No nested ternary operators (use if/else or helper functions)
- [ ] No unused variables or parameters (prefix with `_` if needed)
- [ ] Complex logic extracted into helper functions

### Error Handling & Accessibility

- [ ] All error messages are user-friendly and don't expose internals
- [ ] Immediate feedback provided for user actions (loading states, success/error)
- [ ] Semantic HTML used throughout
- [ ] ARIA labels present on all interactive elements
- [ ] Keyboard navigation tested and working

### Performance & Animation

- [ ] Components memoized appropriately (React.memo, useMemo, useCallback)
- [ ] Framer Motion used for all UI transitions
- [ ] Animations are fast (2-5ms for typing effects) and don't block input
- [ ] No unnecessary re-renders

### Enhanced UI/Layout Implementation Validation (Updated 2025-01-11)

**Code reviewer MUST verify these were addressed during implementation:**

#### Pre-Implementation Questions Verified
- [ ] **Layout Positioning**: Exact element positioning was confirmed (left/center/right, top/bottom)
- [ ] **Responsive Behavior**: Mobile vs desktop behavior differences were specified
- [ ] **Visual Integration**: Background blending vs distinct styling was clarified
- [ ] **State Management**: Data clearing vs preservation requirements were defined
- [ ] **Animation Preferences**: Desired vs distracting animations were discussed
- [ ] **Form Structure**: Form sections and button positioning were specified
- [ ] **Background & Borders**: Border and background requirements were clarified
- [ ] **Z-index & Layering**: Element stacking and overlay requirements were defined

#### Implementation Validation Completed
- [ ] **Mobile/Desktop Consistency**: Responsive behavior tested immediately during development
- [ ] **Visual Integration**: Background blending and border consistency verified
- [ ] **State Persistence**: Data preservation vs clearing behavior confirmed
- [ ] **Animation Conflicts**: Interfering animations and timing issues checked
- [ ] **Z-index Layering**: Proper element stacking verified on both mobile and desktop
- [ ] **Form Flow**: Complete user journey tested from start to finish
- [ ] **Edge Cases**: Long content, empty states, and error conditions tested

#### Common Debugging Patterns Avoided
- [ ] **Layout Specification Gaps**: Avoided implementing without exact positioning details
- [ ] **Responsive Design Conflicts**: Avoided making desktop changes without testing mobile
- [ ] **Visual Integration Problems**: Avoided adding borders/backgrounds without considering parent context
- [ ] **State Management Edge Cases**: Avoided assuming form behavior without confirming persistence requirements
- [ ] **Animation Timing Conflicts**: Avoided adding animations without considering interactions
